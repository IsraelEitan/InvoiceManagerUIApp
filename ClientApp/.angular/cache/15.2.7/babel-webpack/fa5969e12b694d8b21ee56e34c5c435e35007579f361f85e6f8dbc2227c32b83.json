{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/invoice.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/shared/form-helper.service\";\nimport * as i5 from \"../validation-error/validation-error.component\";\nimport * as i6 from \"../invoice-status/invoice-status.component\";\nexport class InvoiceEditComponent {\n  constructor(formBuilder, invoiceService, route, router, formHelperService) {\n    this.formBuilder = formBuilder;\n    this.invoiceService = invoiceService;\n    this.route = route;\n    this.router = router;\n    this.formHelperService = formHelperService;\n    // Date in 'yyyy-MM-dd' format\n    const currentDate = new Date().toISOString().split('T')[0];\n    this.invoiceForm = this.formBuilder.group({\n      date: [currentDate, Validators.required],\n      status: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n  ngOnInit() {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam) {\n      this.invoiceId = +idParam;\n      this.invoiceService.getInvoiceById(this.invoiceId).subscribe(invoice => {\n        this.invoiceForm.patchValue(invoice);\n      });\n    } else {\n      //Redirect\n      console.error('Invoice ID is not provided');\n      this.router.navigate(['/invoices']);\n    }\n  }\n  onStatusChange(selectedStatus) {\n    this.invoiceForm.get('status')?.setValue(selectedStatus);\n  }\n  onSubmit() {\n    if (this.invoiceForm.valid) {\n      const updateInvoiceDto = {\n        date: this.invoiceForm.value.date,\n        status: this.invoiceForm.value.status,\n        amount: this.invoiceForm.value.amount\n      };\n      this.invoiceService.updateInvoice(this.invoiceId, updateInvoiceDto).subscribe(result => {\n        console.log('Invoice Updated', result);\n        //Navigate to the list of invoices\n        this.router.navigate(['/invoices']);\n      });\n    } else {\n      this.formHelperService.markFormGroupTouched(this.invoiceForm);\n    }\n  }\n}\nInvoiceEditComponent.ɵfac = function InvoiceEditComponent_Factory(t) {\n  return new (t || InvoiceEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.InvoiceService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormHelperService));\n};\nInvoiceEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InvoiceEditComponent,\n  selectors: [[\"app-invoice-edit\"]],\n  decls: 20,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"date\", \"formControlName\", \"date\"], [3, \"control\"], [3, \"statusChange\"], [\"type\", \"number\", \"formControlName\", \"amount\"], [\"type\", \"submit\"]],\n  template: function InvoiceEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Edit Invoice\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function InvoiceEditComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\")(4, \"label\");\n      i0.ɵɵtext(5, \"Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 1)(7, \"app-validation-error\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\")(9, \"app-invoice-status\", 3);\n      i0.ɵɵlistener(\"statusChange\", function InvoiceEditComponent_Template_app_invoice_status_statusChange_9_listener($event) {\n        return ctx.onStatusChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"app-validation-error\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\")(12, \"label\");\n      i0.ɵɵtext(13, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"label\");\n      i0.ɵɵtext(15, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 4)(17, \"app-validation-error\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"button\", 5);\n      i0.ɵɵtext(19, \"Update Invoice\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.invoiceForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"control\", ctx.invoiceForm.get(\"date\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"control\", ctx.invoiceForm.get(\"status\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"control\", ctx.invoiceForm.get(\"amount\"));\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.ValidationErrorComponent, i6.InvoiceStatusComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","InvoiceEditComponent","constructor","formBuilder","invoiceService","route","router","formHelperService","currentDate","Date","toISOString","split","invoiceForm","group","date","required","status","amount","min","ngOnInit","idParam","snapshot","paramMap","get","invoiceId","getInvoiceById","subscribe","invoice","patchValue","console","error","navigate","onStatusChange","selectedStatus","setValue","onSubmit","valid","updateInvoiceDto","value","updateInvoice","result","log","markFormGroupTouched","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\invoice-edit\\invoice-edit.component.ts","C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\invoice-edit\\invoice-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { InvoiceService } from '../../services/invoice.service';\r\nimport { UpdateInvoiceDto } from '../../dtos/update-invoice.dto';\r\nimport { FormHelperService } from '../../services/shared/form-helper.service';\r\n\r\n@Component({\r\n  selector: 'app-invoice-edit',\r\n  templateUrl: './invoice-edit.component.html',\r\n  styleUrls: ['./invoice-edit.component.css']\r\n})\r\nexport class InvoiceEditComponent implements OnInit {\r\n  invoiceForm: FormGroup;\r\n  invoiceId!: number;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private invoiceService: InvoiceService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formHelperService: FormHelperService\r\n  ) {\r\n\r\n    // Date in 'yyyy-MM-dd' format\r\n    const currentDate = new Date().toISOString().split('T')[0];\r\n\r\n    this.invoiceForm = this.formBuilder.group({\r\n      date: [currentDate, Validators.required],\r\n      status: ['', Validators.required],\r\n      amount: ['', [Validators.required, Validators.min(0.01)]],\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    const idParam = this.route.snapshot.paramMap.get('id');\r\n    if (idParam) {\r\n      this.invoiceId = +idParam;\r\n      this.invoiceService.getInvoiceById(this.invoiceId).subscribe(invoice => {\r\n        this.invoiceForm.patchValue(invoice);\r\n      });    \r\n    } else {\r\n      //Redirect\r\n      console.error('Invoice ID is not provided');\r\n      this.router.navigate(['/invoices']);\r\n    }\r\n  }\r\n\r\n  onStatusChange(selectedStatus: string) {\r\n    this.invoiceForm.get('status')?.setValue(selectedStatus);\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.invoiceForm.valid) {\r\n      const updateInvoiceDto: UpdateInvoiceDto = {\r\n        date: this.invoiceForm.value.date,\r\n        status: this.invoiceForm.value.status,\r\n        amount: this.invoiceForm.value.amount,   \r\n      };\r\n\r\n      this.invoiceService.updateInvoice(this.invoiceId, updateInvoiceDto).subscribe(result => {\r\n        console.log('Invoice Updated', result);\r\n        //Navigate to the list of invoices\r\n        this.router.navigate(['/invoices']); \r\n      });\r\n    } else {\r\n      this.formHelperService.markFormGroupTouched(this.invoiceForm);\r\n    }\r\n  }\r\n}\r\n","<h2>Edit Invoice</h2>\r\n<form [formGroup]=\"invoiceForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div>\r\n    <label>Date:</label>\r\n    <input type=\"date\" formControlName=\"date\">\r\n    <app-validation-error [control]=\"invoiceForm.get('date')!\"></app-validation-error>\r\n  </div>\r\n  <div>\r\n    <app-invoice-status (statusChange)=\"onStatusChange($event)\"></app-invoice-status>\r\n    <app-validation-error [control]=\"invoiceForm.get('status')!\"></app-validation-error>\r\n  </div>\r\n  <div>\r\n    <label>Amount:</label>\r\n    <label>Amount:</label>\r\n    <input type=\"number\" formControlName=\"amount\">\r\n    <app-validation-error [control]=\"invoiceForm.get('amount')!\"></app-validation-error>\r\n  </div>\r\n  <button type=\"submit\">Update Invoice</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}