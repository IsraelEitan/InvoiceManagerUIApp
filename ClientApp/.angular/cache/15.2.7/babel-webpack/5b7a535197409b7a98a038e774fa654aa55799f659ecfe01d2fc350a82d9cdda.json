{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ValidationErrorComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const error_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(error_r2);\n  }\n}\nfunction ValidationErrorComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ValidationErrorComponent_ng_container_0_div_1_Template, 2, 1, \"div\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getErrors());\n  }\n}\nexport class ValidationErrorComponent {\n  getErrors() {\n    const errors = [];\n    if (this.control) {\n      const controlErrors = this.control.errors || {};\n      for (const key of Object.keys(controlErrors)) {\n        switch (key) {\n          case 'required':\n            errors.push(`${this.fieldName} is required.`);\n            break;\n          case 'min':\n            errors.push(`${this.fieldName} must be greater than or equal to ${controlErrors[key].min}.`);\n            break;\n        }\n      }\n    }\n    return errors;\n  }\n  get fieldName() {\n    return 'Field'; // Default value\n  }\n}\n\nValidationErrorComponent.ɵfac = function ValidationErrorComponent_Factory(t) {\n  return new (t || ValidationErrorComponent)();\n};\nValidationErrorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ValidationErrorComponent,\n  selectors: [[\"app-validation-error\"]],\n  inputs: {\n    control: \"control\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngFor\", \"ngForOf\"], [1, \"error-message\"]],\n  template: function ValidationErrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ValidationErrorComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.control.invalid && (ctx.control.dirty || ctx.control.touched));\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf],\n  styles: [\".error-summary[_ngcontent-%COMP%] {\\r\\n  background-color: #f8d7da; \\r\\n  border: 1px solid #f5c6cb; \\r\\n  padding: 10px;\\r\\n  margin-bottom: 10px;\\r\\n  color: #721c24; \\r\\n  border-radius: 4px;\\r\\n}\\r\\n\\r\\n  .error-summary[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\r\\n    list-style: none;\\r\\n    padding-left: 0;\\r\\n  }\\r\\n\\r\\n  .error-summary[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n\\r\\n.error-message[_ngcontent-%COMP%] {\\r\\n  color: #dc3545; \\r\\n  font-size: 14px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy92YWxpZGF0aW9uLWVycm9yL3ZhbGlkYXRpb24tZXJyb3IuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlCQUF5QjtFQUN6Qix5QkFBeUI7RUFDekIsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCOztFQUVFO0lBQ0UsZ0JBQWdCO0lBQ2hCLGVBQWU7RUFDakI7O0VBRUE7SUFDRSxrQkFBa0I7RUFDcEI7O0FBRUY7RUFDRSxjQUFjO0VBQ2QsZUFBZTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1zdW1tYXJ5IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhkN2RhOyBcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZjVjNmNiOyBcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgY29sb3I6ICM3MjFjMjQ7IFxyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxufVxyXG5cclxuICAuZXJyb3Itc3VtbWFyeSB1bCB7XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gIH1cclxuXHJcbiAgLmVycm9yLXN1bW1hcnkgbGkge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG4gIH1cclxuXHJcbi5lcnJvci1tZXNzYWdlIHtcclxuICBjb2xvcjogI2RjMzU0NTsgXHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;IACEA,8BAA6D;IAAAA,YAAW;IAAAA,iBAAM;;;;IAAjBA,eAAW;IAAXA,8BAAW;;;;;IAD1EA,6BAA4E;IAC1EA,wFAA8E;IAChFA,0BAAe;;;;IADUA,eAAc;IAAdA,4CAAc;;;ACOvC,OAAM,MAAOC,wBAAwB;EAGnCC,SAAS;IACP,MAAMC,MAAM,GAAa,EAAE;IAC3B,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,MAAMC,aAAa,GAAG,IAAI,CAACD,OAAO,CAACD,MAAM,IAAI,EAAE;MAC/C,KAAK,MAAMG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,EAAE;QAC5C,QAAQC,GAAG;UACT,KAAK,UAAU;YACbH,MAAM,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,SAAS,eAAe,CAAC;YAC7C;UACF,KAAK,KAAK;YACRP,MAAM,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,SAAS,qCAAqCL,aAAa,CAACC,GAAG,CAAC,CAACK,GAAG,GAAG,CAAC;YAC5F;QAAM;;;IAId,OAAOR,MAAM;EACf;EACA,IAAIO,SAAS;IACX,OAAO,OAAO,CAAC,CAAC;EAClB;;;AAtBWT,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAW;EAAAC;IAAAT;EAAA;EAAAU;EAAAC;EAAAC;EAAAC;IAAA;MDRrCjB,2FAEe;;;MAFAA,wFAA2D","names":["i0","ValidationErrorComponent","getErrors","errors","control","controlErrors","key","Object","keys","push","fieldName","min","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\validation-error\\validation-error.component.html","C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\validation-error\\validation-error.component.ts"],"sourcesContent":["<ng-container *ngIf=\"control.invalid && (control.dirty || control.touched)\">\r\n  <div *ngFor=\"let error of getErrors()\" class=\"error-message\">{{ error }}</div>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-validation-error',\r\n  templateUrl: './validation-error.component.html',\r\n  styleUrls: ['./validation-error.component.css']\r\n})\r\nexport class ValidationErrorComponent {\r\n  @Input() control!: FormControl;\r\n\r\n  getErrors(): string[] {\r\n    const errors: string[] = [];\r\n    if (this.control) {\r\n      const controlErrors = this.control.errors || {};\r\n      for (const key of Object.keys(controlErrors)) {\r\n        switch (key) {\r\n          case 'required':\r\n            errors.push(`${this.fieldName} is required.`);\r\n            break;\r\n          case 'min':\r\n            errors.push(`${this.fieldName} must be greater than or equal to ${controlErrors[key].min}.`);\r\n            break;  \r\n        }\r\n      }\r\n    }\r\n    return errors;\r\n  }\r\n  get fieldName(): string {\r\n    return 'Field'; // Default value\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}