{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, shareReplay } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { AppConfig } from '../app.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InvoiceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl + '/invoices';\n  }\n  getAllInvoices(pageNumber = 1, pageSize = AppConfig.defaultPageSize) {\n    const queryParams = `?pageNumber=${pageNumber}&pageSize=${pageSize}`;\n    return this.http.get(`${this.apiUrl}/All/${queryParams}`);\n  }\n  getInvoiceById(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  getInvoiceStatuses() {\n    if (!this.invoiceStatuses$) {\n      this.invoiceStatuses$ = this.http.get(`${this.apiUrl}/statuses`).pipe(catchError(this.handleError), shareReplay(1));\n    }\n    return this.invoiceStatuses$;\n  }\n  createInvoice(invoice) {\n    return this.http.post(this.apiUrl, invoice).pipe(catchError(this.handleError));\n  }\n  updateInvoice(id, invoice) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, invoice).pipe(catchError(this.handleError));\n  }\n  deleteInvoice(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'Something bad happened; please try again later.';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      console.error('An error occurred:', error.error.message);\n      errorMessage = error.error.message;\n    } else {\n      // Server-side error\n      console.error(`Backend returned code ${error.status}, body was:`, error.error);\n      errorMessage = error.error?.message || errorMessage;\n    }\n    return throwError(errorMessage);\n  }\n}\nInvoiceService.ɵfac = function InvoiceService_Factory(t) {\n  return new (t || InvoiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nInvoiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InvoiceService,\n  factory: InvoiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;AAExD,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,SAAS,QAAQ,eAAe;;;AAOzC,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAGJ,WAAW,CAACK,MAAM,GAAG,WAAW;EAET;EAExCC,cAAc,CAACC,aAAqB,CAAC,EAAEC,WAAmBP,SAAS,CAACQ,eAAe;IACjF,MAAMC,WAAW,GAAG,eAAeH,UAAU,aAAaC,QAAQ,EAAE;IACpE,OAAO,IAAI,CAACJ,IAAI,CAACO,GAAG,CAAe,GAAG,IAAI,CAACN,MAAM,QAAQK,WAAW,EAAE,CAAC;EACzE;EAEAE,cAAc,CAACC,EAAU;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIQ,EAAE,EAAE;IAClC,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAaG,GAAG,CAAC,CAACC,IAAI,CACxCjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACH;EAEAC,kBAAkB;IAChB,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MAC1B,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAACd,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACN,MAAM,WAAW,CAAC,CAACU,IAAI,CAC7EjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,EAC5BjB,WAAW,CAAC,CAAC,CAAC,CACf;;IAEH,OAAO,IAAI,CAACmB,gBAAgB;EAC9B;EAEAC,aAAa,CAACC,OAAyB;IACrC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAa,IAAI,CAAChB,MAAM,EAAEe,OAAO,CAAC,CAACL,IAAI,CAC1DjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACH;EAEAM,aAAa,CAACT,EAAU,EAAEO,OAAyB;IACjD,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIQ,EAAE,EAAE;IAClC,OAAO,IAAI,CAACT,IAAI,CAACmB,GAAG,CAACT,GAAG,EAAEM,OAAO,CAAC,CAACL,IAAI,CACrCjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACH;EAEAQ,aAAa,CAACX,EAAU;IACtB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIQ,EAAE,EAAE;IAClC,OAAO,IAAI,CAACT,IAAI,CAACqB,MAAM,CAAaX,GAAG,CAAC,CAACC,IAAI,CAC3CjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAW,CAACU,KAAwB;IAC1C,IAAIC,YAAY,GAAG,iDAAiD;IAEpE,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAC,OAAO,CAACH,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACI,OAAO,CAAC;MACxDH,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACI,OAAO;KACnC,MAAM;MACL;MACAD,OAAO,CAACH,KAAK,CAAC,yBAAyBA,KAAK,CAACK,MAAM,aAAa,EAAEL,KAAK,CAACA,KAAK,CAAC;MAC9EC,YAAY,GAAGD,KAAK,CAACA,KAAK,EAAEI,OAAO,IAAIH,YAAY;;IAGrD,OAAO9B,UAAU,CAAC8B,YAAY,CAAC;EACjC;;AA7DWzB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA8B,SAAd9B,cAAc;EAAA+B,YAFb;AAAM","names":["throwError","catchError","shareReplay","environment","AppConfig","InvoiceService","constructor","http","apiUrl","getAllInvoices","pageNumber","pageSize","defaultPageSize","queryParams","get","getInvoiceById","id","url","pipe","handleError","getInvoiceStatuses","invoiceStatuses$","createInvoice","invoice","post","updateInvoice","put","deleteInvoice","delete","error","errorMessage","ErrorEvent","console","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\services\\invoice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, shareReplay } from 'rxjs/operators';\r\nimport { InvoiceDto } from '../dtos/invoice.dto';\r\nimport { environment } from '../../environments/environment'\r\nimport { AppConfig } from '../app.config'; \r\nimport { CreateInvoiceDto } from '../dtos/create-invoice.dto';\r\nimport { UpdateInvoiceDto } from '../dtos/update-invoice.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InvoiceService {\r\n  private apiUrl = environment.apiUrl + '/invoices'; \r\n  private invoiceStatuses$!: Observable<string[]>;\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllInvoices(pageNumber: number = 1, pageSize: number = AppConfig.defaultPageSize): Observable<InvoiceDto[]> {\r\n    const queryParams = `?pageNumber=${pageNumber}&pageSize=${pageSize}`;\r\n    return this.http.get<InvoiceDto[]>(`${this.apiUrl}/All/${queryParams}`);\r\n  }\r\n\r\n  getInvoiceById(id: number): Observable<InvoiceDto> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.get<InvoiceDto>(url).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getInvoiceStatuses(): Observable<string[]> {\r\n    if (!this.invoiceStatuses$) {\r\n      this.invoiceStatuses$ = this.http.get<string[]>(`${this.apiUrl}/statuses`).pipe(\r\n        catchError(this.handleError),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n    return this.invoiceStatuses$;\r\n  }\r\n\r\n  createInvoice(invoice: CreateInvoiceDto): Observable<InvoiceDto> {\r\n    return this.http.post<InvoiceDto>(this.apiUrl, invoice).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateInvoice(id: number, invoice: UpdateInvoiceDto): Observable<any> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.put(url, invoice).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteInvoice(id: number): Observable<InvoiceDto> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.delete<InvoiceDto>(url).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'Something bad happened; please try again later.';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      console.error('An error occurred:', error.error.message);\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Server-side error\r\n      console.error(`Backend returned code ${error.status}, body was:`, error.error);\r\n      errorMessage = error.error?.message || errorMessage;\r\n    }\r\n\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}