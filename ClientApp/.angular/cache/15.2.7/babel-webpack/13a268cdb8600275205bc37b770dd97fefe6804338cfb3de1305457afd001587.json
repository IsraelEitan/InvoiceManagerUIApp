{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/invoice.service\";\nimport * as i3 from \"@angular/router\";\nexport class InvoiceEditComponent {\n  constructor(formBuilder, invoiceService, route, router) {\n    this.formBuilder = formBuilder;\n    this.invoiceService = invoiceService;\n    this.route = route;\n    this.router = router;\n    this.invoiceForm = this.formBuilder.group({\n      date: ['', Validators.required],\n      status: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0.01)]],\n      customerId: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n  ngOnInit() {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam) {\n      this.invoiceId = +idParam;\n      this.invoiceService.getInvoiceById(this.invoiceId).subscribe(invoice => {\n        this.invoiceForm.patchValue(invoice);\n      });\n    } else {\n      //Redirect\n      console.error('Invoice ID is not provided');\n      this.router.navigate(['/invoices']);\n    }\n  }\n  onStatusChange(selectedStatus) {\n    this.selectedStatus = selectedStatus;\n  }\n  onSubmit() {\n    if (this.invoiceForm.valid) {\n      this.invoiceService.updateInvoice(this.invoiceId, this.invoiceForm.value).subscribe(result => {\n        console.log('Invoice Updated', result);\n        //Navigate to the list of invoices\n        this.router.navigate(['/invoices']);\n      });\n    }\n  }\n}\nInvoiceEditComponent.ɵfac = function InvoiceEditComponent_Factory(t) {\n  return new (t || InvoiceEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.InvoiceService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n};\nInvoiceEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InvoiceEditComponent,\n  selectors: [[\"app-invoice-edit\"]],\n  decls: 19,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"date\", \"formControlName\", \"date\"], [3, \"statusChange\"], [\"type\", \"number\", \"formControlName\", \"amount\"], [\"type\", \"number\", \"formControlName\", \"customerId\"], [\"type\", \"submit\"]],\n  template: function InvoiceEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Edit Invoice\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function InvoiceEditComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\")(4, \"label\");\n      i0.ɵɵtext(5, \"Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\")(8, \"app-invoice-status\", 2);\n      i0.ɵɵlistener(\"statusChange\", function InvoiceEditComponent_Template_app_invoice_status_statusChange_8_listener($event) {\n        return ctx.onStatusChange($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n      i0.ɵɵtext(11, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"label\");\n      i0.ɵɵtext(15, \"Customer ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 5);\n      i0.ɵɵtext(18, \"Update Invoice\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.invoiceForm);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"div[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\ninput[_ngcontent-%COMP%] {\\r\\n  padding: 5px;\\r\\n  border: 1px solid #ddd;\\r\\n  border-radius: 4px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9pbnZvaWNlLWVkaXQvaW52b2ljZS1lZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxubGFiZWwge1xyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxufVxyXG5cclxuaW5wdXQge1xyXG4gIHBhZGRpbmc6IDVweDtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AASnE,OAAM,MAAOC,oBAAoB;EAK/BC,YACUC,WAAwB,EACxBC,cAA8B,EAC9BC,KAAqB,EACrBC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IAEd,IAAI,CAACC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACxCC,IAAI,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAC/BC,MAAM,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACjCE,MAAM,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;MACzDC,UAAU,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,GAAG,CAAC,CAAC,CAAC,CAAC;KAC1D,CAAC;EACJ;EAEAE,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAI,CAACX,KAAK,CAACY,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACtD,IAAIH,OAAO,EAAE;MACX,IAAI,CAACI,SAAS,GAAG,CAACJ,OAAO;MACzB,IAAI,CAACZ,cAAc,CAACiB,cAAc,CAAC,IAAI,CAACD,SAAS,CAAC,CAACE,SAAS,CAACC,OAAO,IAAG;QACrE,IAAI,CAAChB,WAAW,CAACiB,UAAU,CAACD,OAAO,CAAC;MACtC,CAAC,CAAC;KACH,MAAM;MACL;MACAE,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;MAC3C,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;;EAEvC;EAEAC,cAAc,CAACC,cAAsB;IACnC,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACvB,WAAW,CAACwB,KAAK,EAAE;MAC1B,IAAI,CAAC3B,cAAc,CAAC4B,aAAa,CAAC,IAAI,CAACZ,SAAS,EAAE,IAAI,CAACb,WAAW,CAAC0B,KAAK,CAAC,CAACX,SAAS,CAACY,MAAM,IAAG;QAC3FT,OAAO,CAACU,GAAG,CAAC,iBAAiB,EAAED,MAAM,CAAC;QACtC;QACA,IAAI,CAAC5B,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,CAAC;;EAEN;;AA7CW1B,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAmC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVjCC,0BAAI;MAAAA,4BAAY;MAAAA,iBAAK;MACrBA,+BAAwD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACrDD,2BAAK;MACIA,qBAAK;MAAAA,iBAAQ;MACpBA,2BAA0C;MAC5CA,iBAAM;MACNA,2BAAK;MACiBA;QAAA,OAAgBC,0BAAsB;MAAA,EAAC;MAACD,iBAAqB;MAEnFA,2BAAK;MACIA,wBAAO;MAAAA,iBAAQ;MACtBA,4BAA8C;MAChDA,iBAAM;MACNA,4BAAK;MACIA,6BAAY;MAAAA,iBAAQ;MAC3BA,4BAAkD;MACpDA,iBAAM;MACNA,kCAAsB;MAAAA,+BAAc;MAAAA,iBAAS;;;MAhBzCA,eAAyB;MAAzBA,2CAAyB","names":["Validators","InvoiceEditComponent","constructor","formBuilder","invoiceService","route","router","invoiceForm","group","date","required","status","amount","min","customerId","ngOnInit","idParam","snapshot","paramMap","get","invoiceId","getInvoiceById","subscribe","invoice","patchValue","console","error","navigate","onStatusChange","selectedStatus","onSubmit","valid","updateInvoice","value","result","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\invoice-edit\\invoice-edit.component.ts","C:\\Users\\Lenovo\\source\\repos\\InvoiceManagerUI\\ClientApp\\src\\app\\components\\invoice-edit\\invoice-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { InvoiceService } from '../../services/invoice.service';\r\n\r\n@Component({\r\n  selector: 'app-invoice-edit',\r\n  templateUrl: './invoice-edit.component.html',\r\n  styleUrls: ['./invoice-edit.component.css']\r\n})\r\nexport class InvoiceEditComponent implements OnInit {\r\n  invoiceForm: FormGroup;\r\n  invoiceId!: number;\r\n  selectedStatus!: string;  \r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private invoiceService: InvoiceService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.invoiceForm = this.formBuilder.group({\r\n      date: ['', Validators.required],\r\n      status: ['', Validators.required],\r\n      amount: ['', [Validators.required, Validators.min(0.01)]],\r\n      customerId: ['', [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    const idParam = this.route.snapshot.paramMap.get('id');\r\n    if (idParam) {\r\n      this.invoiceId = +idParam;\r\n      this.invoiceService.getInvoiceById(this.invoiceId).subscribe(invoice => {\r\n        this.invoiceForm.patchValue(invoice);\r\n      });    \r\n    } else {\r\n      //Redirect\r\n      console.error('Invoice ID is not provided');\r\n      this.router.navigate(['/invoices']);\r\n    }\r\n  }\r\n\r\n  onStatusChange(selectedStatus: string) {\r\n    this.selectedStatus = selectedStatus;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.invoiceForm.valid) {\r\n      this.invoiceService.updateInvoice(this.invoiceId, this.invoiceForm.value).subscribe(result => {\r\n        console.log('Invoice Updated', result);\r\n        //Navigate to the list of invoices\r\n        this.router.navigate(['/invoices']); \r\n      });\r\n    }\r\n  }\r\n}\r\n","<h2>Edit Invoice</h2>\r\n<form [formGroup]=\"invoiceForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div>\r\n    <label>Date:</label>\r\n    <input type=\"date\" formControlName=\"date\">\r\n  </div>\r\n  <div>\r\n    <app-invoice-status (statusChange)=\"onStatusChange($event)\"></app-invoice-status>\r\n  </div>\r\n  <div>\r\n    <label>Amount:</label>\r\n    <input type=\"number\" formControlName=\"amount\">\r\n  </div>\r\n  <div>\r\n    <label>Customer ID:</label>\r\n    <input type=\"number\" formControlName=\"customerId\">\r\n  </div>\r\n  <button type=\"submit\">Update Invoice</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}